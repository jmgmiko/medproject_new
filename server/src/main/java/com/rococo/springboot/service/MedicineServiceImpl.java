package com.rococo.springboot.service;

import com.rococo.springboot.model.DiseaseModel;
import com.rococo.springboot.model.MedicalRecordModel;
import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.rococo.springboot.model.MedicineModel;
import com.rococo.springboot.model.RecordMedicineAssoc;
import com.rococo.springboot.repository.DiseaseRepository;
import com.rococo.springboot.repository.MedicineRepository;
import com.rococo.springboot.repository.RecordMedicineAssocRepository;


@Service
public class MedicineServiceImpl implements MedicineService {

	@Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private MedicineRepository patientRepository;

        @Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private DiseaseRepository diseaseRepository;
        
        @Autowired // This means to get the bean called userRepository
	// Which is auto-generated by Spring, we will use it to handle the data
	private RecordMedicineAssocRepository recAssocRepository;
        
	@Override
	public MedicineModel getMedicineInfo(MedicineModel patientModel) {
		return patientRepository.findById(patientModel.getId()).get();
	}

	@Override
	public List<MedicineModel> getAll() {
		List<MedicineModel> list = new ArrayList<>();
		patientRepository.findAll().iterator().forEachRemaining(list::add);
		return list;
	}
        
        public void removeMedicine(MedicineModel medicine){
            patientRepository.deleteById(medicine.getId());
        }
        
        public MedicineModel getByName(String name) {
            return patientRepository.findByName(name);
        }

	/* (non-Javadoc)
	 * @see com.rococo.springboot.service.PersonService#registerPerson(com.rococo.springboot.model.MedicineModel)
	 */
	@Override
	public void registerMedicine(MedicineModel patientModel) {          
            boolean found = this.ifFound(patientModel);
            if (found == false) {
                patientRepository.save(patientModel);		
            }
	}
        
	public boolean updateMedicine(MedicineModel patientModel) {
                boolean found = this.ifFound(patientModel);
                if (found == false) {
                    patientRepository.save(patientModel);
                }	
                return found;
	}
        
        private boolean ifFound(MedicineModel patientModel){
            List<DiseaseModel> all = diseaseRepository.findAll();
            boolean found = false;
            for (int x=0; x<all.size(); x++) {
                for (MedicineModel op:all.get(x).getMeds()) {
                    if (op.equals(patientModel)) {
                        found = true;
                        break;
                    }                    
                }
            }
            List <RecordMedicineAssoc> other = recAssocRepository.findAll();
            for (int x=0; x<other.size(); x++) {
                if (other.get(x).getMed().equals(other)) {
                    found = true;
                    break;
                }
            }
            return found;
        }

}
